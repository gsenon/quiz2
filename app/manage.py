#!/usr/bin/env python3
"""
Management script –¥–ª—è Quiz –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import os
import sys
import time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

try:
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º app –∏ database
    from app import app
    from database import db_instance
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º db –∏–∑ app –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º
    try:
        from app import db
    except ImportError:
        from flask_sqlalchemy import SQLAlchemy
        db = SQLAlchemy(app)
        
except ImportError as e:
    logger.error(f"Import error: {e}")
    sys.exit(1)

def wait_for_postgres(max_retries=30, delay=5):
    """–û–∂–∏–¥–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ PostgreSQL"""
    logger.info("üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ PostgreSQL...")
    
    for i in range(max_retries):
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
            db_instance.get_connection()
            logger.info("‚úÖ PostgreSQL –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        except Exception as e:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {i+1}/{max_retries}: PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - {e}")
            if i < max_retries - 1:
                time.sleep(delay)
    
    logger.error("‚ùå PostgreSQL –Ω–µ —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
    return False

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    if not wait_for_postgres():
        return False
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ database.py
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        if db_instance.init_database():
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return True
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return False
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False

def run_migrations():
    """–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π"""
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π...")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –º–∏–≥—Ä–∞—Ü–∏–π
    logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
    return True

if __name__ == "__main__":
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "init_db":
            if init_database():
                logger.info("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                sys.exit(0)
            else:
                logger.error("üí• –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                sys.exit(1)
                
        elif command == "run_migrations":
            if run_migrations():
                sys.exit(0)
            else:
                sys.exit(1)
            
        elif command == "runserver":
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
            if not wait_for_postgres():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î, –≤—ã—Ö–æ–¥")
                sys.exit(1)
            app.run(host="0.0.0.0", port=8080, debug=False)
            
        else:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            print("  init_db       - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            print("  run_migrations - –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π")
            print("  runserver     - –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞")
            sys.exit(1)
    else:
        # –ó–∞–ø—É—Å–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–µ—Ä–≤–µ—Ä
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
        if not wait_for_postgres():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î, –≤—ã—Ö–æ–¥")
            sys.exit(1)
        app.run(host="0.0.0.0", port=8080, debug=False)
