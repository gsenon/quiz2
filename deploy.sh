#!/bin/bash

set -e

echo "=== Deploying Quiz System to Minikube ==="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
command -v minikube >/dev/null 2>&1 || { echo "‚ùå Minikube not installed"; exit 1; }
command -v kubectl >/dev/null 2>&1 || { echo "‚ùå Kubectl not installed"; exit 1; }
command -v docker >/dev/null 2>&1 || { echo "‚ùå Docker not installed"; exit 1; }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
echo "üìÅ Checking required files..."
REQUIRED_FILES=(
    "k8s/namespace.yaml"
    "k8s/storageclass.yaml" 
    "k8s/postgres-secret.yaml"
    "k8s/postgres-pvc.yaml"
    "k8s/postgres-deployment.yaml"
    "k8s/postgres-service.yaml"
    "k8s/app-configmap.yaml"
    "k8s/app-secret.yaml"
    "k8s/app-deployment.yaml"
    "k8s/app-service.yaml"
    "k8s/app-ingress.yaml"
)

for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        echo "‚ùå Missing file: $file"
        exit 1
    fi
    echo "‚úÖ Found: $file"
done

# –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
echo "üîÑ Recreating Minikube cluster..."
minikube delete || true
minikube start --cpus=4 --memory=8192 --disk-size=20g --driver=docker

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ docker environment
echo "üîß Configuring Docker environment..."
eval $(minikube docker-env)

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞
echo "üê≥ Building Docker image..."
docker build -t quiz-system:latest .

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—Ä–∞–∑ —Å–æ–∑–¥–∞–Ω
echo "üîç Checking Docker images..."
docker images | grep quiz-system

# –°–æ–∑–¥–∞–Ω–∏–µ namespace –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º
echo "üìÅ Creating namespace..."
kubectl apply -f k8s/namespace.yaml

# –°–æ–∑–¥–∞–Ω–∏–µ StorageClass
echo "üíæ Creating StorageClass..."
kubectl apply -f k8s/storageclass.yaml

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL
echo "üóÑÔ∏è Deploying PostgreSQL..."
kubectl apply -f k8s/postgres-secret.yaml
kubectl apply -f k8s/postgres-pvc.yaml
kubectl apply -f k8s/postgres-deployment.yaml
kubectl apply -f k8s/postgres-service.yaml

# –û–∂–∏–¥–∞–Ω–∏–µ PostgreSQL
echo "‚è≥ Waiting for PostgreSQL to be ready..."
for i in {1..60}; do
    if kubectl get pods -n quiz-system -l app=postgresql 2>/dev/null | grep -q "1/1"; then
        echo "‚úÖ PostgreSQL is ready!"
        # –î–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î
        sleep 10
        break
    fi
    echo "‚è±Ô∏è Waiting for PostgreSQL... ($i/60)"
    sleep 5
done

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ PostgreSQL –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–æ—Ç–æ–≤
if ! kubectl wait --for=condition=ready pod -l app=postgresql -n quiz-system --timeout=30s; then
    echo "‚ùå PostgreSQL failed to start"
    kubectl describe pods -n quiz-system -l app=postgresql
    kubectl logs -n quiz-system -l app=postgresql
    exit 1
fi

# –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–∏–º app-deployment.yaml —Å imagePullPolicy: Never
echo "‚öôÔ∏è  Updating app deployment with local image settings..."
cat > k8s/app-deployment-fixed.yaml << 'EOF'
apiVersion: apps/v1
kind: Deployment
metadata:
  name: quiz-app
  namespace: quiz-system
  labels:
    app: quiz-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: quiz-app
  template:
    metadata:
      labels:
        app: quiz-app
    spec:
      containers:
      - name: quiz-app
        image: quiz-system:latest
        imagePullPolicy: Never
        env:
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_PORT
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_NAME
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: APP_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secret
              key: secret
        ports:
        - containerPort: 8000
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 3
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
EOF

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
echo "üöÄ Deploying Application..."
kubectl apply -f k8s/app-configmap.yaml
kubectl apply -f k8s/app-secret.yaml
kubectl apply -f k8s/app-deployment-fixed.yaml
kubectl apply -f k8s/app-service.yaml

# –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
echo "‚è≥ Waiting for Application to be ready..."
for i in {1..60}; do
    if kubectl get pods -n quiz-system -l app=quiz-app 2>/dev/null | grep -q "1/1"; then
        echo "‚úÖ Application is ready!"
        break
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∞
    POD_STATUS=$(kubectl get pods -n quiz-system -l app=quiz-app -o jsonpath='{.items[0].status.phase}' 2>/dev/null || echo "Unknown")
    echo "‚è±Ô∏è Waiting for application... ($i/60) - Status: $POD_STATUS"
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –ø–æ–∫–∞–∂–µ–º –ª–æ–≥–∏ –ø–æ—Å–ª–µ 10 –ø–æ–ø—ã—Ç–æ–∫
    if [ "$i" -gt 10 ]; then
        echo "üîç Checking application logs..."
        kubectl logs -n quiz-system -l app=quiz-app --tail=20 || echo "No logs available yet"
    fi
    
    sleep 5
done

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ
if kubectl wait --for=condition=ready pod -l app=quiz-app -n quiz-system --timeout=30s; then
    echo "‚úÖ Application started successfully!"
else
    echo "‚ö†Ô∏è  Application may be having issues, checking details..."
    kubectl describe pods -n quiz-system -l app=quiz-app
    echo "=== Application logs ==="
    kubectl logs -n quiz-system -l app=quiz-app --tail=50
fi

# –í–∫–ª—é—á–µ–Ω–∏–µ Ingress
echo "üåê Enabling Ingress..."
minikube addons enable ingress
sleep 20

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Ingress controller –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=ingress-nginx -n ingress-nginx --timeout=60s

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Ingress
echo "üîó Deploying Ingress..."
kubectl apply -f k8s/app-ingress.yaml

# –î–∞–µ–º –≤—Ä–µ–º—è Ingress'—É –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å—Å—è
sleep 25

# –ü–æ–ª—É—á–µ–Ω–∏–µ URL
echo "‚úÖ Deployment Completed!"
echo ""
echo "üìä Pods status:"
kubectl get pods -n quiz-system -o wide

echo ""
echo "üåê Services:"
kubectl get services -n quiz-system

echo ""
echo "üîó Ingress:"
kubectl get ingress -n quiz-system

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
echo ""
echo "üéØ Testing application accessibility..."
APP_URL=$(minikube service quiz-app-service -n quiz-system --url || echo "Unable to get URL")
echo "   Application URL: $APP_URL"

MINIKUBE_IP=$(minikube ip)
echo "   Direct access via: http://$MINIKUBE_IP"

echo ""
echo "üîç Monitoring commands:"
echo "   kubectl logs -f deployment/quiz-app -n quiz-system"
echo "   kubectl logs -f deployment/postgresql -n quiz-system"
echo "   kubectl get all -n quiz-system"

echo ""
echo "üîÑ If application has issues, try restarting:"
echo "   kubectl rollout restart deployment/quiz-app -n quiz-system"

echo ""
echo "üóëÔ∏è To clean up: kubectl delete namespace quiz-system"

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
rm -f k8s/app-deployment-fixed.yaml